startsearch

import java.io.IOException;

public class StartSearch {
    private Map targetMap;
    private int numArrows;
    private int inertia;
    private int direction;

    public StartSearch(String filename) {
        try {
            targetMap = new Map(filename);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }



    private MapCell nextCell (MapCell cell){
        MapCell bestCell = null;
        for (int b = 0;  b < 6; b ++) {

            // if cell exists
            if (cell.getNeighbour(b) != null) {

                // if cell is NOT marked
                if (!cell.getNeighbour(b).isMarked()) {

                    // if cell is free or is destination cell
                    if (!cell.getNeighbour(b).isMarked() || cell.getNeighbour(b).isTarget()) {
                        // gets the free cell with lowest index
                        if (!cell.getNeighbour(b).isMarked()) {
                            bestCell = cell.getNeighbour(b);
                            break;
                        }
                        bestCell = cell.getNeighbour(b);
                    }

                    else if (cell.getNeighbour(b).isHighAltitude()) {
                        bestCell = cell.getNeighbour(b);
                    }

                    else if (cell.getNeighbour(b).isThief()) {
                        bestCell = cell.getNeighbour(b);
                    }
                }
            }
        }

        return bestCell;
    }






V1 ------------------------


    public static void main(String[] args){
        StartSearch search = new StartSearch(args[0]);
        int distance = Integer.parseInt(args[1]);
        int targetsfound = 0;


        ArrayStack stack = new ArrayStack();	// creates empty stack
        MapCell cell = MapCell.isStart();		// gets starting cell

        stack.push(cell);	// pushes starting cell to stack

        while (!stack.isEmpty()) {
            MapCell currentCell = (MapCell) stack.peek();	// looks at cell at top of stack

            // if the cell at the top of the stack is the destination cell, break out of the loop
            if (currentCell.isTarget()) {
                break;
            }

            // if any of neighboring cells is a tower, remove top cell from stack
            if (currentCell.isBlackHole()) {
                MapCell poppedCell = (MapCell) stack.pop();
                poppedCell.markOutStack();
                currentCell = (MapCell) stack.peek();
            }

            // checks for unmarked neighboring cells
            if (path.nextCell(currentCell) != null) {
                stack.push(path.nextCell(currentCell));
                path.nextCell(currentCell).markInStack();
            }
            else {
                stack.pop();
                currentCell.markOutStack();
            }

            cell = currentCell;
        }

        System.out.println("Destination reached.");
        System.out.println("Number of cells from initial cell to destination: " + stack.size());
    }



}
















V2 --------------------------------


public static void main(String[] args){
        if (args.length < 1) {
            System.out.println("You must provide the name of the input file");
            System.exit(0);
        }
        int distance = Integer.parseInt(args[1]);
        int targetsfound = 0;
        int returns = 0;

        StartSearch path = new StartSearch(args[0]);
        path.direction = 4;

        ArrayStack stack = new ArrayStack();	// creates empty stack
        MapCell cell = path.targetMap.getStart(); // gets starting cell

        while (path.numArrows > 0) { //While Cupid still has arrows
            stack.push(cell);    // pushes starting cell to stack
            cell.markInStack();
            path.numArrows--;
            path.inertia = 0;
            while (!stack.isEmpty() && distance != 0 && returns != 3) {
                MapCell currentCell = (MapCell) stack.peek();    // looks at cell at top of stack

                // if the cell at the top of the stack is the destination cell, break out of the loop
                if (currentCell.isTarget()) {
                    targetsfound++;
                    break;
                }

                // if any of neighboring cells is a blockade, remove top cell from stack
                if (currentCell.isBlackHole()) {
                    MapCell poppedCell = (MapCell) stack.pop();
                    poppedCell.markOutStack();
                    currentCell = (MapCell) stack.peek();
                    returns++;
                }

                // checks for unmarked neighboring cells
                if (path.nextCell(currentCell) != null) {
                    distance--;
                    stack.push(path.nextCell(currentCell));
                    try {
                        path.nextCell(currentCell).markInStack();
                    } catch (NullPointerException e) {
                        System.out.println("Null pointer exception, cannot mark in stack a null best cell");
                    }

                } else {
                    returns++;
                    stack.pop();
                    currentCell.markOutStack();
                }

            }
            System.out.println("Arrow length " + stack.size());
            System.out.println("Targets found: " + targetsfound);
        }
    }







V3==============================================================



    public static void main(String[] args){
        ArrayStack stack = new ArrayStack();// creates empty stack
        StartSearch path = new StartSearch(args[0]);
        int distance = Integer.parseInt(args[1]);
        int targetsfound = 0;
        int backtracks = 0;
        MapCell cell = path.targetMap.getStart(); // gets starting cell

        while (path.numArrows > 0) { //While Cupid still has arrows
            stack.push(cell); // pushes starting cell to stack but don't mark it else other arrows would think start is marked
            cell.markInStack();
            path.numArrows--;
            while (!stack.isEmpty() && distance != 0 && backtracks != 4) {
                MapCell currentCell = (MapCell) stack.peek();    // looks at cell at top of stack

                // if the cell at the top of the stack is the destination cell, break out of the loop
                if (currentCell.isTarget()) {
                    targetsfound++;
                    currentCell.markInStack();
                    break;
                }

                // if any of neighboring cells is a blockade, remove top cell from stack
                if (currentCell.isBlackHole()) {
                    MapCell poppedCell = (MapCell) stack.pop();
                    poppedCell.markOutStack();
                    currentCell = (MapCell) stack.peek();
                    backtracks++;
                }

                // checks for unmarked neighboring cells
                if (path.nextCell(currentCell) != null) {
                    distance--;
                    try {
                        stack.push(path.nextCell(currentCell));
                        path.nextCell(currentCell).markInStack();
                    } catch (NullPointerException e) {
                        System.out.println("Null everywhere");
                    }
                }

                else {
                    backtracks++;
                    stack.pop(); //backtrack
                    currentCell.markOutStack();
                }

            }
            System.out.println("Arrow length " + stack.size());
            System.out.println("Targets found: " + targetsfound);
        }
    }









