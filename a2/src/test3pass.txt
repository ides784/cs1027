import java.io.IOException;
import java.io.FileNotFoundException;


public class StartSearch {
    private Map targetMap;
    private int numArrows;
    private int inertia;
    private int direction;



    public StartSearch(String filename) {
        ArrayStack.sequence="";
        this.inertia = 0;
        this.direction = -1;
        try {
            targetMap = new Map(filename);
        } catch (IOException e) {
            e.printStackTrace();
        }
        numArrows = targetMap.quiverSize();
    }

    private MapCell nextCell (MapCell cell){
        MapCell bestCell;
        //follow path if possible

//===================
        if (cell.isVerticalPath()){
            if (cell.getNeighbour(0) != null && !cell.getNeighbour(0).isMarked() && !cell.getNeighbour(0).isBlackHole() && (this.direction==0) && !cell.getNeighbour(0).isHorizontalPath()){
                this.inertia++;
                return cell.getNeighbour(0);
            }
            if (cell.getNeighbour(2) != null && !cell.getNeighbour(2).isMarked() && !cell.getNeighbour(2).isBlackHole() && (this.direction==2) && !cell.getNeighbour(2).isHorizontalPath()){
                this.inertia++;
                return cell.getNeighbour(2);
            }
        }
        if (cell.isHorizontalPath()){
            if (cell.getNeighbour(1) != null && !cell.getNeighbour(1).isMarked() && !cell.getNeighbour(1).isBlackHole() && (this.direction==1) && !cell.getNeighbour(1).isVerticalPath()){
                this.inertia++;
                return cell.getNeighbour(1);
            }
            if (cell.getNeighbour(3) != null && !cell.getNeighbour(3).isMarked() && !cell.getNeighbour(3).isBlackHole() && (this.direction==3) && !cell.getNeighbour(3).isVerticalPath()){
                this.inertia++;
                return cell.getNeighbour(3);
            }
        }
//==============
        if(this.direction == 0){
            // if cell exists & is NOT marked
            if (cell.getNeighbour(0) != null && !cell.getNeighbour(0).isMarked() && !cell.getNeighbour(0).isBlackHole() && !cell.getNeighbour(0).isHorizontalPath()) {
                this.inertia++;
                return cell.getNeighbour(0);
            }
        }

        if(this.direction == 1){
            // if cell exists & is NOT marked
            if (cell.getNeighbour(1) != null && !cell.getNeighbour(1).isMarked() && !cell.getNeighbour(1).isBlackHole() && !cell.getNeighbour(1).isVerticalPath()) {
                this.inertia++;
                return cell.getNeighbour(1);
            }
        }

        if(this.direction == 2){
            // if cell exists & is NOT marked
            if (cell.getNeighbour(2) != null && !cell.getNeighbour(2).isMarked() && !cell.getNeighbour(2).isBlackHole() && !cell.getNeighbour(2).isHorizontalPath()) {
                this.inertia++;
                return cell.getNeighbour(2);
            }
        }
        if(this.direction == 3){
            // if cell exists & is NOT marked
            if (cell.getNeighbour(3) != null && !cell.getNeighbour(3).isMarked() && !cell.getNeighbour(3).isBlackHole() && !cell.getNeighbour(3).isVerticalPath()) {
                this.inertia++;
                return cell.getNeighbour(3);
            }
        }

        if(this.inertia >= 3) {return null;}//if inertia reached, can no longer turn
            for (int i = 0; i < 4; i++) { //if path is blocked, turn
                // if cell exists & is NOT marked
                if (cell.getNeighbour(i) != null && !cell.getNeighbour(i).isMarked() && !cell.getNeighbour(i).isBlackHole()) {
                    // if cell is free or is destination cell
                    if (cell.getNeighbour(i).isTarget()) {
                        bestCell = cell.getNeighbour(i);
                        this.direction = i;
                        return bestCell;
                    } else if (cell.getNeighbour(i).isCrossPath()) {
                        bestCell = cell.getNeighbour(i);
                        this.direction = i;
                        return bestCell;
                    } else if (cell.getNeighbour(i).isVerticalPath() || cell.getNeighbour(i).isHorizontalPath()) {
                        if (cell.getNeighbour(i).isVerticalPath()) {
                            if (i == 0 || i == 2) {
                                this.direction = i;
                                return cell.getNeighbour(i);
                            }
                        }
                        if (cell.getNeighbour(i).isHorizontalPath()) {
                            if (i == 1 || i == 3) {
                                this.direction = i;
                                return cell.getNeighbour(i);
                            }
                        }
                    }


                }

            }

        return null; // if no valid cell then return null
    }

//=======================================================================================================

//=======================================================================================================

    public static void main(String[] args){
        ArrayStack stack = new ArrayStack(); // creates empty stack

        StartSearch path = new StartSearch(args[0]); //takes first commandline arg
        int distance;
        if (args.length!=2){
            distance = 100;
        }
        else{
            distance = Integer.parseInt(args[1]); //takes second commandline arg
        }
        int origdistance = distance;
        int targetsfound = 0;
        int returns = 0;
        MapCell cell = path.targetMap.getStart(); // gets starting cell
        System.out.println(path.numArrows);

        while (path.numArrows != 0) { //While Cupid still has arrows
            stack.push(cell); // pushes starting cell to stack
            cell.markInStack();
            path.numArrows--;
            System.out.println("fires arrow");
            if(stack.isEmpty()){
                System.out.println("stack empty");
            }
            while (!stack.isEmpty() && distance != 0 && returns != 3) {
                System.out.println(ArrayStack.sequence);
                MapCell currentCell = (MapCell) stack.peek();    // looks at cell at top of stack
                if(currentCell == null){
                }
                // if the cell at the top of the stack is the destination cell, break out of the loop
                if (currentCell.isTarget()) {
                    targetsfound++;
                    currentCell.markInStack();
                    while(!stack.isEmpty()) {
                        stack.pop();
                    }
                    returns=0;
                    distance=origdistance;
                    path.direction = -1;
                    path.inertia=0;
                    break;
                }
                // if the current cell is a blockade, remove top cell from stack
                if (currentCell.isBlackHole()) {
                    MapCell poppedCell = (MapCell) stack.pop();
                    poppedCell.markOutStack();
                    currentCell = (MapCell) stack.peek();
                    returns++;
                    distance++;
                }

                MapCell bestcell = path.nextCell(currentCell);
                // checks for unmarked neighboring cells
                if (bestcell != null) {
                    distance--;
                    System.out.println("inertia: " + path.inertia);
                    System.out.println("direction: " + path.direction);
                    try {
                        stack.push(bestcell);
                        (bestcell).markInStack();
                    } catch (NullPointerException e) {
                        System.out.println("Null pointer");
                    }
                }

                else {
                    returns++;
                    distance++;
                    stack.pop();
                    System.out.println("inertia: " + path.inertia);
                    System.out.println("direction: " + path.direction);
                    System.out.println("returns: " +returns);

                }

            }
            while(!stack.isEmpty()) {
                stack.pop();
            }
            returns=0;
            distance=origdistance;
            path.inertia=0;
            path.direction=-1;

            System.out.println("Arrow length " + stack.size());
            System.out.println("Targets found: " + targetsfound);

        }
    }

}

